let localStream;
let peers = {};
const socket = new WebSocket('ws://localhost:3000');
let userData = {};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
document.getElementById('userForm').addEventListener('submit', function (e) {
    e.preventDefault();

    // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
    userData = {
        firstName: document.getElementById('firstName').value,
        lastName: document.getElementById('lastName').value,
        email: document.getElementById('email').value,
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON
    saveUserData(userData);

    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
    document.getElementById('formContainer').style.display = 'none';
    document.querySelector('.video-container').style.display = 'block';

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞–º–µ—Ä—É
    startVideo();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON
async function saveUserData(data) {
    try {
        const response = await fetch('http://localhost:3000/save-user-data/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data),
        });

        const result = await response.json();

        // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ OK, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (!response.ok) {
            throw new Error(result.error || "Unknown error occurred");
        }

        console.log("Data saved successfully:", result);

    } catch (error) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É "Email already registered"
        if (error.message === "Email already registered") {
            console.warn("User already registered. Proceeding with login instead.");
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –∫–∞–∫ –±—É–¥—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        } else {
            console.error("Error saving data:", error);
            alert(error.message); // –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –¥—Ä—É–≥–∞—è
        }
    }

    // ‚úÖ –î–æ–∂–¥–∞—Ç—å—Å—è, –ø–æ–∫–∞ –∫–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–∏—Ç—Å—è
    await startVideo();

    // ‚úÖ –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã –∑–∞–ø—É—Å–∫–∞–µ–º WebRTC
    initWebRTC();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
function startVideo() {
    return navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        .then(stream => {
            localStream = stream;
            const localVideo = document.getElementById('localVideo');
            localVideo.srcObject = stream;
            localVideo.play();
        })
        .catch(error => {
            console.error('Error accessing camera:', error);
        });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebRTC
function initWebRTC() {
    socket.onmessage = async (event) => {
        try {
            let data;

            // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ `event.data` –æ–±—ä–µ–∫—Ç–æ–º Blob
            if (event.data instanceof Blob) {
                const text = await event.data.text(); // –ß–∏—Ç–∞–µ–º Blob –∫–∞–∫ —Ç–µ–∫—Å—Ç
                data = JSON.parse(text); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
            } else {
                data = JSON.parse(event.data);
            }

            if (data.type === 'offer') {
                const peer = new SimplePeer({ initiator: false, trickle: false });
                peer.on('signal', (signalData) => {
                    socket.send(JSON.stringify({ ...signalData, type: 'answer', email: userData.email }));
                });
                peer.on('stream', (stream) => {
                    addRemoteVideo(stream, data.email);
                });
                peer.signal(data);
                peers[data.email] = peer;
            } else if (data.type === 'answer') {
                const peer = peers[data.email];
                if (peer) {
                    peer.signal(data);
                }
            }
        } catch (error) {
            console.error('Error parsing WebSocket message:', error);
        }
    };

    // –°–æ–∑–¥–∞–µ–º peer –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const peer = new SimplePeer({ initiator: true, trickle: false });
    peer.on('signal', data => {
        socket.send(JSON.stringify({ ...data, type: 'offer', email: userData.email }));
    });
    peer.on('stream', stream => {
        addRemoteVideo(stream, userData.email);
    });
    peer.addStream(localStream);
    peers[userData.email] = peer;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function addRemoteVideo(stream, email) {
    const remoteVideos = document.getElementById('remoteVideos');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –±–ª–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let videoBlock = document.getElementById(`remote-${email}`);
    if (!videoBlock) {
        videoBlock = document.createElement('div');
        videoBlock.className = 'remoteVideo';
        videoBlock.id = `remote-${email}`;
        remoteVideos.appendChild(videoBlock);
    }

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç video
    const video = document.createElement('video');
    video.srcObject = stream;
    video.autoplay = true;

    // –û—á–∏—â–∞–µ–º –±–ª–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    videoBlock.innerHTML = '';
    videoBlock.appendChild(video);
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
function toggleCamera() {
    if (localStream) {
        const videoTracks = localStream.getVideoTracks();
        if (videoTracks.length > 0) {
            videoTracks.forEach(track => track.enabled = !track.enabled);
        }
    } else {
        console.error('Local stream is not available.');
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
function toggleMicrophone() {
    if (localStream) {
        const audioTracks = localStream.getAudioTracks();
        if (audioTracks.length > 0) {
            audioTracks.forEach(track => track.enabled = !track.enabled);
        }
    } else {
        console.error('Local stream is not available.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
function takeScreenshot() {
    const canvas = document.createElement('canvas');
    const video = document.getElementById('localVideo');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    const ctx = canvas.getContext('2d');
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

    const link = document.createElement('a');
    link.href = canvas.toDataURL('image/png');
    link.download = 'screenshot.png';
    link.click();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ —ç–∫—Ä–∞–Ω–∞
async function startScreenShare() {
    try {
        const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true });
        const screenVideo = document.createElement('video');
        screenVideo.srcObject = screenStream;
        screenVideo.autoplay = true;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —ç–∫—Ä–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const screenContainer = document.createElement('div');
        screenContainer.className = 'remoteVideo';
        screenContainer.appendChild(screenVideo);
        document.getElementById('remoteVideos').appendChild(screenContainer);
    } catch (error) {
        console.error('Error accessing screen:', error);
    }
}